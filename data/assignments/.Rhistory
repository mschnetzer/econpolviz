# Graphs and tables
librarian::shelf(msthemes, patchwork, texreg, Hmisc, maps)
# Stats
librarian::shelf(MASS, lmtest, sandwich, DescTools,ggvenn)
select <- dplyr::select
# Filter estimate for Italy by Oyvat/Ã–ztunali (Outlier)
rawdata <- read_xlsx("~/Dropbox/Paper WL-PL_Meta/Paper/JES submitted 2022-09/2_r&r round 1/WL-PL Datenbank final.xlsx") |>
filter(!(studyid %in% c(30) & country_region=="Italy"))
data <- rawdata |> mutate(
es_num = ifelse(wshare_pshare == "Profit Share", as.numeric(es)*-1, as.numeric(es)),
es_dom = ifelse(wshare_pshare == "Profit Share", as.numeric(es_domestic)*-1, as.numeric(es_domestic)),
C_num = ifelse(wshare_pshare == "Profit Share", as.numeric(C)*-1, as.numeric(C)),
I_num = ifelse(wshare_pshare == "Profit Share", as.numeric(I)*-1, as.numeric(I)),
NX_num = ifelse(wshare_pshare == "Profit Share", as.numeric(NX)*-1, as.numeric(NX)),
dom_demand = ifelse(is.na(as.numeric(es_domestic)), C_num+I_num, es_dom),
precision_obs = sqrt(n_obs),
n_obs_inv = 1/n_obs,
precision_obs_inv = 1/precision_obs,
yaverage = round(yaverage, 0),
d_published = as.numeric(!journal == "."),
d_insig_tot = `Insignificant_results_0_total(C_I_or_NX)`,
d_insig_dom = `Insignificant_results_0_domestic(C_or_I)`,
d_short = as.numeric(ydifference < 30),
d_quarterly = as.numeric(yearly_quarterly == "quarterly"),
d_newpub = as.numeric(yearpub > 2014), #last 5 yrs
d_earlyperiod = as.numeric(yaverage < 1990),
d_simultaneous = as.numeric(method_e == "Simultan"),
d_endogeneity = as.numeric(!estimationstrat %in% c("OLS","GLS","WLS","PLS")),
d_no_linear = as.numeric(!estimationstrat %in% c("GLS","OLS","PLS","WLS","2SLS")),
d_capacity = as.numeric(dep_v == "Capacity Utilisation"),
d_oecd = as.numeric(country_region %in% c("Austria","Belgium","Australia","Canada","Chile","Czech Republic","Denmark","Finland","France","Germany","Greece","Hungary","Iceland","Ireland","Italy","Japan","South Korea","Luxembourg","Mexico","Netherlands","Norway","Poland","Portugal","Slovakia","Spain","Sweden","Switzerland","Turkey","United Kingdom","USA","OECD","EU-28","Euro Area","Euro Area (EU12)","Northern Euro-Countries","Southern Euro-Countries")),
d_continent = case_when(
country_region %in% c("China","China-Macao","Hong Kong","India","Indonesia","Iran","Japan","Jordan","Malaysia","Pakistan","Singapore","South Korea","Syria","Thailand","Turkey") ~ "Asia",
country_region %in% c("Austria","Belgium","Czech Republic","Denmark","EU-28","Euro Area","Euro Area (EU12)","Finland","France","Germany","Greece","Hungary","Iceland","Ireland","Italy","Luxembourg","Malta","Netherlands","Northern Euro-Countries","Norway","Poland","Portugal","Slovakia","Spain","Sweden","Switzerland","Southern Euro-Countries","United Kingdom") ~ "Europe",
country_region %in% c("USA","Canada") ~ "North America",
country_region %in% c("Argentina","Brazil","Chile","Colombia","Ecuador","Venezuela","Mexico","Uruguay") ~ "South America",
country_region == "OECD" ~ "OECD",
TRUE ~ "Africa"),
d_lowinc = as.numeric(d_continent %in% c("South America", "Africa", "Asia")),
d_wealth = as.numeric(d_wealth_effects == 1),
d_ineq = as.numeric(d_personal_inequality == 1),
d_fin = as.numeric(d_financialisation == 1),
d_gov = as.numeric(d_gov_spending == 1),
d_I_profits = as.numeric(d_I_profit_share == 1 | d_I_profit_rate == 1),
d_I_interest = as.numeric(d_I_interest_rate == 1),
d_e_profits = as.numeric(d_net_exports_profit_share==1 |
d_net_exports_profit_rate==1 | d_e_profit_share==1 | d_e_profit_rate==1),
d_e_demand = as.numeric(d_net_exports_foreign_demand==1 | d_e_foreign_demand==1),
d_e_ULC = as.numeric(d_e_ULC == 1),
d_e_exchangerate = as.numeric(d_net_exports_exchange_rate==1 | d_e_exchangerate==1),
d_price_level = as.numeric(d_net_exports_price_level==1 | d_e_price_level==1),
)
# META REGRESSION ANALYSIS ----
data <- data |>
mutate(d_newpub_7 = as.numeric(yearpub > 2012),
d_newpub_10 = as.numeric(yearpub > 2009))
metareg <- function(type, test, addvars, addtit = "", addfn = "_inv") {
res <- list()
depvar <- ifelse(type == "tot", "es_num", "dom_demand")
precvar <- ifelse(test == "fat", "precision_obs_inv", "n_obs_inv")
weightvar <- ifelse(test == "fat", "n_obs", "n_obs")
insigvar <- ifelse(type == "tot", "d_insig_tot", "d_insig_dom")
modname <- ifelse(type == "tot", "Total demand", "Domestic demand")
specname <- ifelse(test == "fat", "FAT-PET", "PEESE")
pubbias <- as.formula(get(paste(depvar)) ~ get(paste(precvar)))
pubspec <- as.formula(get(paste(depvar)) ~ get(paste(precvar)) +
d_published + get(paste(insigvar)))
methspec <- update(pubspec, ~ . + d_endogeneity + d_simultaneous + d_meanmarginal +
d_quarterly + d_capacity + d_real_wages)
timespec <- update(methspec, ~ . + d_earlyperiod + d_oecd)
funspec <- if (type == "tot") {
update(timespec, ~ .  + d_I_profits +
d_I_interest + d_e_demand + d_e_profits +
d_e_ULC + d_e_exchangerate)
} else {
update(timespec, ~ .  + d_I_profits + d_I_interest)
}
fullspec <- update(funspec, paste("~ . +", addvars))
for (spec in c("pubbias","pubspec","methspec","timespec","funspec","fullspec")) {
res[[paste("mra",type,spec,test, sep =".")]] <-
lm(get(paste(spec)), data = data, weights = get(paste(weightvar)))
res[[paste("rse",type,spec,test, sep =".")]] <-
coeftest(res[[paste("mra",type,spec,test, sep =".")]],
function(x) vcovHC(x, method="arellano", type="HC1",cluster="studyid"))
}
htmlreg(list(res[[1]], res[[3]], res[[5]], res[[7]], res[[9]], res[[11]]),
caption = paste0("Regression results for ", tolower(modname),
" (", specname, ")", addtit),
label = paste0("tab:reg",type,"_",test,addfn),
caption.above = TRUE,
stars = c(0.01, 0.05, 0.1),
custom.header = list("(1)"=1,"(2)"=2,"(3)"=3,"(4)"=4,"(5)"=5,"(6)"=6),
custom.model.names = c("Pub. bias","Pub. char.","Est. strat.","Time/Space","Controls in I/X", "Oth. controls"),
custom.coef.map = list("(Intercept)"="Constant",
"get(paste(precvar))"="Precision",
"d_newpub"="Recent publication",
"d_newpub_7"="Recent publication (7yrs)",
"d_newpub_10"="Recent publication (10yrs)",
"d_published"="Published",
"get(paste(insigvar))"="Insignificant estimate",
"d_endogeneity"="Tackling endogeneity",
"d_simultaneous"="Simultaneous estimation",
"d_meanmarginal"="Mean marginal effect",
"d_quarterly"="Quarterly data",
"d_capacity"="Capacity utilization",
"d_real_wages"="Real wages",
"d_earlyperiod"="Early observation period",
"d_oecd"="OECD country",
"d_lowinc"="Low-income region",
"d_I_profits"="Profits in I",
"d_I_interest"="Interest rate in I",
"d_e_demand"="Demand in X",
"d_e_profits"="Profits in X",
"d_e_ULC"="Unit labor costs in X",
"d_e_exchangerate"="Exchange rate in X",
"d_gov"="Government spending",
"d_fin"="Debt and credit",
"d_ineq"="Personal inequality",
"d_wealth"="Wealth effects"),
override.se = list(res[[2]][,2], res[[4]][,2], res[[6]][,2],
res[[8]][,2], res[[10]][,2], res[[12]][,2]),
override.pvalues = list(res[[2]][,4], res[[4]][,4], res[[6]][,4],
res[[8]][,4], res[[10]][,4], res[[12]][,4]),
digits = 3,
fontsize = "footnotesize",
no.margin = TRUE,
dcolumn = TRUE,
use.packages = FALSE,
file = paste0("models/JES_RR/models_",type,"_",test,addfn,".html"))
}
metareg(type = "tot", test = "peese", addvars="d_gov + d_fin + d_ineq + d_wealth")
metareg(type = "tot", test = "fat", addvars="d_gov + d_fin + d_ineq + d_wealth")
metareg(type = "dom", test = "peese", addvars="d_gov + d_fin + d_ineq + d_wealth")
metareg(type = "dom", test = "fat", addvars="d_gov + d_fin + d_ineq + d_wealth")
### Domestic with estimation strategy only (=results in paper!)
bpm_dom <- lm(dom_demand ~ d_published + d_insig_dom + d_endogeneity + d_meanmarginal + d_quarterly + d_capacity + d_real_wages, data = data, weights = n_obs)
testdat_dom <- data.frame(d_published = 1, d_insig_dom = 0, d_endogeneity = 1, d_meanmarginal = 1, d_quarterly = 1, d_capacity = 0, d_real_wages = 0)
predict(bpm_dom, newdata = testdat_dom, interval = "confidence")
### Total with estimation strategy only (=results in paper!)
bpm_tot <- lm(es_num ~ d_published + d_insig_tot + d_endogeneity + d_meanmarginal + d_quarterly + d_capacity + d_real_wages, data = data, weights = n_obs)
testdat_tot <- data.frame(d_published = 1, d_insig_tot = 0, d_endogeneity = 1, d_meanmarginal = 1, d_quarterly = 1, d_capacity = 0, d_real_wages = 0)
predict(bpm_tot, newdata = testdat_tot, interval = "confidence")
# PUBLICATION BIAS ----
robdata <- data |>
mutate(se = precision_obs_inv,
var = n_obs_inv)
# Create subsamples
# Top 10% of estimates for total and domestic
data.t10 <- robdata |> filter(!is.na(es_num)) |>
slice_max(n_obs, prop = 0.1)
robdata |> filter(!is.na(es_num)) |> nrow()
nrow(data.t10)
robdata |> filter(!is.na(es_num)) |> slice_max(n_obs, n = 10)
robdata |> filter(!is.na(dom_demand)) |> slice_max(n_obs, n = 10)
# Large study (id=12) with high n_obs for domestic: 201 of 360 observations in top 10%
data.d10 <- robdata |> filter(!is.na(dom_demand)) |>
slice_max(n_obs, n = 9)
# Standard errors
subse <- data |> filter(!is.na(se)) |>
mutate(var = se^2)
# WAAP (Ioannidis et al. 2017)
waap <- data |> filter(!is.na(se)) |>
mutate(ape = abs(es_num)/2.8,
ind = se < ape) |>
filter(ind == TRUE) |>
mutate(var = se^2,
weight = 1/var)
# Sample for Andrews/Kasy approach: https://maxkasy.github.io/home/metastudy/
subse |> select(es_num, se) |>
write.table(file = "mra_kasy.csv", sep = ",", row.names = F, col.names = F)
# Publication bias function
pubbias <- function(type, test, addtit = "", addfn = "_inv") {
res <- list()
depvar <- ifelse(type == "tot", "es_num", "dom_demand")
precvar <- ifelse(test == "fat", "se", "var")
weightvar <- ifelse(test == "fat", "n_obs", "n_obs")
subdat <- ifelse(type == "tot", "data.t10", "data.d10")
modname <- ifelse(type == "tot", "Total demand", "Domestic demand")
specname <- ifelse(test == "fat", "FAT-PET", "PEESE")
model <- as.formula(get(paste(depvar)) ~ get(paste(precvar)))
# Full sample
colname <- c("Full sample")
res[[paste0("pb.",type,".fullsample.",test)]] <-
lm(model, data = robdata, weights = get(paste(weightvar))) %>%
coeftest(., function(x) vcovHC(x, method="arellano",type="HC1",cluster="studyid"))
res[[paste0("pb.",type,".fullsample.",test,".desc")]] <-
data |> filter(!is.na(get(paste(depvar)))) |>
summarise(mean = round(mean(get(paste(depvar)), na.rm = T),3),
studies = length(unique(studyid)),
count = n())
# Subsample Top 10%
colname <- c(colname, "Top 10%")
res[[paste0("pb.",type,".top10.",test)]] <-
lm(model, data = get(paste(subdat)), weights = get(paste(weightvar))) %>%
coeftest(., function(x) vcovHC(x, method="arellano",type="HC1",cluster="studyid"))
res[[paste0("pb.",type,".top10.",test,".desc")]] <-
get(paste(subdat)) |>
summarise(mean = round(mean(get(paste(depvar)), na.rm = T),3),
studies = length(unique(studyid)),
count = n())
if (type == "tot") {
# Subsample standard errors
colname <- c(colname, "Std.err.")
res[[paste0("pb.",type,".subse.",test)]] <-
lm(model, data = subse, weights = var) %>%
coeftest(., function(x) vcovHC(x, method="arellano",type="HC1",cluster="studyid"))
res[[paste0("pb.",type,".subse.",test,".desc")]] <-
subse |>
summarise(mean = round(mean(get(paste(depvar)), na.rm = T),3),
studies = length(unique(studyid)),
count = n())
# WAAP
colname <- c(colname, "WAAP")
res[[paste0("pb.",type,".waap.",test)]] <-
lm(model, data = waap, weights = weight) %>%
coeftest(., function(x) vcovHC(x, method="arellano",type="HC1",cluster="studyid"))
res[[paste0("pb.",type,".waap.",test,".desc")]] <-
waap |>
summarise(mean = round(mean(get(paste(depvar)), na.rm = T),3),
studies = length(unique(studyid)),
count = n())
}
elements <- length(res)
colhead <- list()
for(i in 1:(elements/2)) {
colhead[[paste0("(", i, ")")]] <- i
}
htmlreg(res[seq(1, elements, 2)],
caption = paste0("Publication bias for ",tolower(modname),
" (",specname,")", addtit),
caption.above = TRUE,
label = paste0("tab:pubbiassg_",type,"_",test,addfn),
custom.header = colhead,
custom.model.names = colname,
custom.coef.names = c("&beta;<sub>0</sub> [mean beyond bias]","&beta;<sub>1</sub> [publication bias]"),
stars = c(0.01, 0.05, 0.1),
custom.gof.rows =
list("Sample mean" = c(res[seq(2, elements, 2)] |> map_dbl(1) |> as.numeric()),
"Observations" = c(res[seq(2, elements, 2)] |> map_dbl(3) |> as.numeric()),
"Studies" = c(res[seq(2, elements, 2)] |> map_dbl(2) |> as.numeric())),
fontsize = "scriptsize",
digits = 3,
no.margin = TRUE,
dcolumn = TRUE,
use.packages = FALSE,
file = paste0("models/JES_RR/pubbias_",type,"_",test,addfn,".html"))
}
pubbias(type = "tot", test = "peese")
pubbias(type = "tot", test = "fat")
pubbias(type = "dom", test = "peese")
pubbias(type = "dom", test = "fat")
# Domestic Top 10%: keep top 9 obs and draw 27 obs (36 obs = 10%) randomly from study 12 and replicate regression
# ATTENTION: HAS TO BE ADDED MANUALLY TO THE OUTPUT TABLE
sampreg <- function(test) {
precvar <- ifelse(test == "fat", "precision_obs_inv", "n_obs_inv")
dfsample <- data.d10 |> slice_max(n_obs, n = 9) |>
bind_rows(data |> filter(studyid == 12) |> slice_sample(n = 27))
fit <- lm(dom_demand ~ get(paste(precvar)), weights = n_obs, data = dfsample)
c(coef(fit)[1], coef(fit)[2], mean=mean(dfsample$dom_demand), studies=length(unique(dfsample$studyid)), observations=nrow(dfsample))
}
set.seed(0)
z.fat <- t(replicate(1000, sampreg(test = "fat"))) |> as.data.frame()
z.fat |> summarise(across(everything(), .fns = list(Mean = mean, SD = sd)))
t.test(z.fat$`(Intercept)`, conf.level = 0.99)
subse
nrow(subse)
subse |> count(studyid)
mean(subse$es_num)
data.tmp <- data
data <- data |> filter(!studyid == 12)
metareg(type = "dom", test = "peese",
addvars="d_gov + d_fin + d_ineq + d_wealth",
addtit = " w/o Stockhammer/Stehrer (2011)", addfn = "_wo_id12_inv")
metareg(type = "dom", test = "fat",
addvars="d_gov + d_fin + d_ineq + d_wealth",
addtit = " w/o Stockhammer/Stehrer (2011)", addfn = "_wo_id12_inv")
pubbias(type = "dom", test = "peese", addtit = " w/o Stockhammer/Stehrer (2011)",
addfn = "_stst")
pubbias(type = "dom", test = "fat", addtit = " w/o Stockhammer/Stehrer (2011)",
addfn = "_stst")
data <- data.tmp
rm(data.tmp)
### Exclude Stockhammer/Reddy/Rabinovich (studyi = 31) ----
data.tmp <- data
data <- data |> filter(!studyid == 31)
metareg(type = "dom", test = "peese",
addvars="d_gov + d_fin + d_ineq + d_wealth",
addtit = " w/o Stockhammer/ea. (2018)", addfn = "_wo_id31_inv")
metareg(type = "dom", test = "fat",
addvars="d_gov + d_fin + d_ineq + d_wealth",
addtit = " w/o Stockhammer/ea. (2018)", addfn = "_wo_id31_inv")
pubbias(type = "dom", test = "peese", addtit = " w/o Stockhammer/ea. (2018)",
addfn = "_wo_id31")
pubbias(type = "dom", test = "fat", addtit = " w/o Stockhammer/ea. (2018)",
addfn = "_wo_id31")
data <- data.tmp
rm(data.tmp)
library(tidyverse)
library(eurostat)
library(MetBrewer)
# Search datasets for GDP (per capita)
search_eurostat("GDP") |> View()
# get GDPpc data from Eurostat
rawgdp <- get_eurostat("nama_10_pc", time_format = "num", type = "label", filters = list(geo = c("AT","FR","IT","DE","ES")))
View(rawgdp)
str(rawgdp)
glimpse(rawgdp)
gdp <- rawgdp |>
filter(unit %in% c("Chain linked volumes (2010), euro per capita",
"Chain linked volumes, percentage change on previous period, per capita"),
na_item == "Gross domestic product at market prices") |>
mutate(geo = ifelse(str_detect(geo, "Germany"), "Germany", geo)) |>
filter(time %in% 2000:2021) |>
drop_na()
## Let's try different geometries
# 1. Line plot with evolution of GDPpc
gdp |> filter(unit == "Chain linked volumes (2010), euro per capita") |>
ggplot(aes(x = time, y = values, group = geo, color = geo)) +
geom_line(linewidth = 1) +
scale_color_manual(name = NULL, values = met.brewer("Juarez")) +
scale_y_continuous(labels = scales::number_format(prefix = "â‚¬", big.mark = ",")) +
labs(x = NULL, y = NULL,  title = "Evolution of GDP 2000-2021",
subtitle = "GDP per capita in â‚¬") +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom")
# Annotation within the plot; for casual style, try "stat = 'smooth'"
library(geomtextpath)
gdp |> filter(unit == "Chain linked volumes (2010), euro per capita") |>
ggplot(aes(x = time, y = values, group = geo, color = geo)) +
geomtextpath::geom_textline(aes(label = geo), hjust = 0.75, vjust = 0.5, #stat = "smooth",
size = 3, fontface = "bold", linewidth = 0.8) +
scale_color_manual(values = met.brewer("Juarez")) +
scale_y_continuous(labels = scales::number_format(prefix = "â‚¬", big.mark = ",")) +
labs(x = NULL, y = NULL, title = "Evolution of GDP 2000-2021",
subtitle = "GDP per capita in â‚¬") +
theme_minimal() +
theme(legend.position = "none")
# 2. Create base year for better comparability of evolution & reorder countries for legend
gdpbase <- gdp |> filter(unit == "Chain linked volumes (2010), euro per capita") |>
mutate(base = values / values[time == 2000] * 100, .by = geo) |>
mutate(geo = fct_reorder2(geo, time, base))
gdpbase |> ggplot(aes(x = time, y = base, group = geo, color = geo)) +
geom_hline(yintercept = 100, color = "black", linewidth = 0.5) +
geom_line(linewidth = 0.8) +
geom_label(aes(label = round(base,0)), data = gdpbase |> slice_max(time, n=1),
hjust = 0.5, size = 2.5, show.legend = F) +
scale_color_manual(name = NULL, values = met.brewer("Juarez")) +
scale_x_continuous(expand = c(0.07,0)) +
labs(x = NULL, y = NULL, title = "Evolution of GDP",
subtitle = "GDP per capita (2000 = 100)") +
theme_minimal() +
theme(legend.position = "right")
# 3. Boxplots with growth rates
gdpgrowth <- gdp |> filter(str_detect(unit, "percentage"))
gdpgrowth |> ggplot(aes(x = geo, y = values, group = geo, color = geo)) +
geom_boxplot(outlier.alpha = 0) +
geom_jitter(width = 0.2, alpha = 0.8) +
scale_color_manual(values = met.brewer("Juarez")) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
labs(x = NULL, y = NULL, title = "Dispersion of GDP growth rates",
subtitle = "Growth rates of per capita GDP between 2000 and 2021") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = "none")
# 4. Facets with bar charts
gdpgrowth |> ggplot(aes(x = time, y = values, fill = geo)) +
geom_bar(stat = "identity") +
facet_wrap(~geo) +
scale_fill_manual(values = met.brewer("Juarez")) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
labs(x = NULL, y = NULL, title = "GDP growth rates from 2000 to 2021") +
theme_minimal() +
theme(legend.position = "none",
panel.grid.minor = element_blank(),
plot.title.position = "plot")
# 5. Lollipop chart
gdpgrowth |> ggplot(aes(x = time, y = values)) +
geom_segment(aes(xend = time, yend = 0), color = "gray90", size = 2.5) +
geom_hline(yintercept = 0, color = "black", size = 0.3) +
geom_point(aes(color = ifelse(values > 0, "pos", "neg")), size = 2.5) +
facet_wrap(~geo) +
scale_color_manual(values = c("pos" = "darkolivegreen3", "neg" = "red")) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
labs(x = NULL, y = NULL, title = "GDP growth rates from 2000 to 2021") +
theme_minimal(base_size = 16) +
theme(legend.position = "none",
panel.border = element_rect(fill = "transparent"),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linewidth = 0.3),
plot.title = element_text(hjust = .5, size = 20))
# 5. Lollipop chart
gdpgrowth |> ggplot(aes(x = time, y = values)) +
geom_segment(aes(xend = time, yend = 0), color = "gray90", linewidth = 2.5) +
geom_hline(yintercept = 0, color = "black", size = 0.3) +
geom_point(aes(color = ifelse(values > 0, "pos", "neg")), size = 2.5) +
facet_wrap(~geo) +
scale_color_manual(values = c("pos" = "darkolivegreen3", "neg" = "red")) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
labs(x = NULL, y = NULL, title = "GDP growth rates from 2000 to 2021") +
theme_minimal(base_size = 16) +
theme(legend.position = "none",
panel.border = element_rect(fill = "transparent"),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linewidth = 0.3),
plot.title = element_text(hjust = .5, size = 20))
library(ggbump)
library(ggflags)
library(futurevisions)
library(colorspace)
library(countrycode)
growthrank <- gdpgrowth |>
mutate(rank = rank(-values, ties.method = "random"), .by = time) |>
filter(time >= 2015) |>
left_join(countrycode::codelist |> select(country.name.en, iso2c),
by = c("geo" = "country.name.en"))
growthrank |>
ggplot(aes(x = time, y = rank, color = geo)) +
geom_point(size = 4) +
geom_bump(linewidth = 2) +
geom_text(data = growthrank |> slice_max(time, n=1),
aes(x = time + 0.2, label = geo), size = 4.5, hjust = 0, fontface = "bold") +
geom_flag(data = growthrank |> slice_min(time, n=1),
aes(x = 2015, y = rank, country = tolower(iso2c)), size = 8) +
scale_color_manual(values = lighten(futurevisions("mars"), .3)) +
scale_size_continuous(range = c(2, 6)) +
scale_x_continuous(breaks = seq(2015, 2021, 2), limits = c(2015, 2021.7)) +
scale_y_reverse() +
labs(x = NULL, y = NULL,
title = toupper("Ranking of GDP per capita growth rates")) +
theme_minimal() +
theme(plot.background = element_rect(fill = "black", color = NA),
plot.title = element_text(size = 20, hjust = 0.5, margin = margin(b = 1, unit = "lines")),
plot.subtitle = element_text(hjust = 0.5, size = 11, margin = margin(b=15, unit="pt")),
plot.title.position = "plot",
legend.position = "none",
panel.grid = element_blank(),
text = element_text(color = "white"),
axis.text.y = element_blank(),
axis.text.x = element_text(color = "white", size = 10))
39+16
8+8
library(tidyverse)
library(lubridate)
library(MetBrewer)
library(ggrepel)
library(gghighlight)
rawdata <- read.csv("inflation.csv")
setwd("~/Daten/Lehre/wipol_viz_MA/data/assignments")
rawdata <- read.csv("inflation.csv")
View(rawdata)
inflation <- rawdata |>
select(geo, date = TIME_PERIOD, values = OBS_VALUE) |>
# Character into date format. Alternatively: mutate(date = as.Date(paste0(date, "-01")))
mutate(date = ymd(date, truncated = 2)) |>
filter(date < "2023-01-01")
inflation <- rawdata |>
select(geo, date = TIME_PERIOD, values = OBS_VALUE) |>
# Character into date format. Alternatively: mutate(date = as.Date(paste0(date, "-01")))
mutate(date = ymd(date, truncated = 2)) |>
filter(date < "2023-01-01")
select
select <- dplyr::select
inflation <- rawdata |>
select(geo, date = TIME_PERIOD, values = OBS_VALUE) |>
# Character into date format. Alternatively: mutate(date = as.Date(paste0(date, "-01")))
mutate(date = ymd(date, truncated = 2)) |>
filter(date < "2023-01-01")
library(tidyverse)
library(MetBrewer)
library(ggrepel)
library(gghighlight)
rawdata <- read.csv("inflation.csv")
inflation <- rawdata |>
select(geo, date = TIME_PERIOD, values = OBS_VALUE) |>
# Character into date format. Alternatively: mutate(date = as.Date(paste0(date, "-01")))
mutate(date = ymd(date, truncated = 2)) |>
filter(date < "2023-01-01")
inflation |>
ggplot(aes(x = date, y = values, group = geo, colour = geo)) +
# Line plot with defined line width
geom_line(linewidth = 0.5) +
# Highlight only selected countries, do not use direct labels and specify how the unhighlighted lines should look like (thin and gray)
gghighlight(geo %in% c("AT","ES","HU"), use_direct_label = F,
unhighlighted_params = list(linewidth = 0.2, color = "gray80")) +
# Manually created the labels (non-overlapping with ggrepel) and print them at the maximum date on the x-axis. The labels are composed with the glue package.
geom_text_repel(data = inflation |> filter(geo %in% c("AT","ES","HU")) |>
slice_max(date), size = 3,
aes(x=date, y=values, label = glue::glue("{geo}: {values}%"), color = geo),
# The xlim command tells ggplot in which range the labels should be plotted. The NA in the second place just means no limit on the right.
xlim = c(as.Date("2023-01-01"), NA),
family = "Roboto Condensed", fontface = "bold") +
# We can change the order of the color palette with []; We don't need a legend (guide_none), but alternatively you can specify the theme(legend.position = "none") below
scale_color_manual(values = met.brewer("Lakota")[c(4,5,3)], guide = guide_none()) +
# Y-axis with percentage symbols
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
# Let's expand the limits of the x-axis to 2024, but the breaks should end with 2020; the labels are then set to %Y to show years!
scale_x_date(expand = c(0, 0),
limits = c(as.Date("2010-01-01"), as.Date("2024-06-01")),
breaks = seq(as.Date("2010-01-01"), as.Date("2020-01-01"), by = "5 years"),
labels = scales::date_format(format = "%Y")) +
labs(x = NULL, y = NULL, title = "Inflation in the European Union",
subtitle = "Annual change in the Harmonized Consumer Prices Index 2010-2022",
caption = "Source: Eurostat. Figure: @matschnetzer") +
theme_minimal(base_family = "Roboto Condensed") +
theme(plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 16),
plot.title.position = "plot",
plot.caption = element_text(size = 7, margin = margin(t=5, unit = "pt")),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linewidth = 0.2))
