panel.grid = element_blank())
coal |> select(geo = Entity, year = Year, coal = starts_with("Coal")) |>
mutate(noncoal = 100-coal) |>
pivot_longer(coal:noncoal, names_to = "energy", values_to = "values") |>
mutate(energy = factor(energy, levels = c("noncoal", "coal"))) |>
filter(geo %in% c("Oceania", "North America", "South America", "Africa", "Asia", "Europe")) |>
ggplot() +
geom_area(aes(x = year, y = values, fill = energy)) +
scale_fill_manual(values = c("coal" = "black", "noncoal" = "white")) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
scale_x_continuous(breaks = c(1990, 2005, 2020)) +
facet_wrap(~geo, nrow = 1) +
theme_minimal() +
theme(legend.position = "none",
strip.text = element_text(color = "gray95", family = "Fira Sans", size = 10),
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.text = element_text(color = "gray95", family = "Roboto Condensed", size = 7),
panel.grid = element_blank())
install.packages(c("fontawesome", "parameters", "processx", "ps", "rgdal", "tinytex"))
librarian::shelf(tidyverse, STATcubeR, janitor, ggstream, ggtext, colorspace, MetBrewer, msthemes, futurevisions)
database <- "str:database:devpi15"
db_schema <- sc_schema_db(database)
einfluss <- db_schema$Influence$`Einfluss Vorjahresmonat`$id
coicop2 <- db_schema$`Mandatory Fields`$`Coicop 5-Steller`$`Coicop 2-Steller`$id
energie <- db_schema$`Mandatory Fields`$`Coicop 5-Steller`$`Coicop 3-Steller`$id
time <- db_schema$`Mandatory Fields`$Time$Time$id
inflation <- sc_table_custom(database, dimensions = c(time,coicop2), measures = einfluss,
language = "de")
energie <- sc_table_custom(database, dimensions = c(time,energie), measures = einfluss,
language = "de")
fin <- bind_rows(inflation$tabulate(),
energie$tabulate() |> filter(str_starts(`Coicop 5-Steller`, "04.5"))) |>
as.data.frame()
View(fin)
plotdat <- fin |>
drop_na() |>
rename(Datum=`Zeitraum der Erhebung`) |>
mutate(Datum = str_replace_all(Datum, "JÃ¤n", "Jan"),
Datum = dmy(paste("01", Datum), locale = "de_DE")) |>
pivot_wider(names_from = "Coicop 5-Steller", values_from = "Einfluss Vorjahresmonat") |>
clean_names() |>
mutate(`Wohnen & Haushalt` = x04_wohnung_wasser_energie - x04_5_aufwand_fur_energie +
x05_hausrat_instandhaltung_des_hauses,
Sonstige = x02_alkoholische_getranke_und_tabak + x03_bekleidung_und_schuhe +
x06_gesundheitspflege + x08_nachrichtenubermittlung +
x10_erziehung_und_unterricht + x12_verschiedene_waren_dienstleistungen) |>
select(Datum = datum,
Nahrungsmittel = x01_nahrungsmittel_alkoholfr_getranke,
`Wohnen & Haushalt`,
Energie = x04_5_aufwand_fur_energie,
Verkehr = x07_verkehr,
`Freizeit & Kultur` = x09_freizeit_und_kultur,
`Restaurants & Hotels` = x11_restaurants_und_hotels,
Sonstige)  |>
mutate(Inflation = rowSums(across(where(is.numeric)))) |>
pivot_longer(cols = -Datum, names_to = "Coicop", values_to = "Beitrag") |>
mutate(Coicop = factor(Coicop, levels = c("Sonstige", "Restaurants & Hotels","Freizeit & Kultur","Nahrungsmittel","Energie", "Wohnen & Haushalt", "Verkehr", "Inflation")))
lastdate <- plotdat |> slice_max(Datum, n=1) |>
filter(Coicop == "Inflation")
firstdate <- plotdat |> slice_min(Datum, n=1) |>
filter(Coicop == "Inflation")
maxinflation <- plotdat |> filter(Coicop == "Inflation") |>
slice_max(Beitrag, n=1) |> pull(Beitrag)
pal <- met.brewer("Lakota")[c(3,2,1,5)]
cols <- c(rbind(darken(pal, 0.1), lighten(pal, 0.2)))
plotdat |> filter(!Coicop == "Inflation") |>
ggplot(aes(x = Datum, y = Beitrag, group = Coicop, fill = Coicop)) +
geom_stream(type = "mirror", bw = 0.6, sorting = "onset") +
scale_fill_manual(values = c(cols[1:6], "gray80"),
name = "", guide = guide_legend(reverse = F, keywidth = 0.5)) +
scale_x_date(date_labels = "%b %y", position = "top",
breaks = seq(firstdate$Datum, lastdate$Datum, by="6 months")) +
coord_cartesian(expand = F, xlim = c(firstdate$Datum - 60, lastdate$Datum + 60),
ylim = c(-maxinflation/2, maxinflation/2)) +
labs(x=NULL, y=NULL) +
theme_ms() +
theme(legend.position = "right",
legend.background = element_rect(fill = "white", colour = NA),
legend.text = element_text(size = 7, family = "Raleway"),
panel.grid.major.y = element_blank(),
axis.text.x = element_text(family = "Raleway", color = "gray50", size = 7),
axis.text.y = element_blank())
library(eurostat)
library(gghighlight)
library(ggrepel)
library(ggflags)
eudat <- get_eurostat(id = "prc_hicp_manr", type = "label",
filters = list(geo = c("AT","DE","ES","FR","IT","BE")))
eudat <- get_eurostat(id = "prc_hicp_manr", type = "label",
filters = list(geo = c("AT","DE","ES","FR","IT","BE")))
plotdat <- eudat |> filter(coicop == "All-items HICP") |>
mutate(geo = ifelse(str_detect(geo, "Germany"), "Germany", geo)) |>
left_join(countrycode::codelist |> select(country.name.en, geo.de = country.name.de, iso2c),
by = c("geo" = "country.name.en"))
View(plotdat)
librarian::shelf(tidyverse, ggtext, eurostat, MetBrewer)
tribble(~x, ~y, ~variable,
0.5, 0.5, 1,
1, 1, 0) |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable)) +
scale_alpha_discrete(values = c(0.5, 1))
?tribble
tribble(~x, ~y, ~variable,
0.5, 0.5, "yes",
1, 1, "no") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable)) +
scale_alpha_discrete(values = c(0.5, 1))
tribble(~x, ~y, ~variable,
0.5, 0.5, "yes",
1, 1, "no") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable))
?scale_alpha_discrete
scale_alpha_discrete(range = c(0.5, 1))
tribble(~x, ~y, ~variable,
0.5, 0.5, "yes",
1, 1, "no") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable)) +
scale_alpha_discrete(range = c(0.5, 1))
tribble(~x, ~y, ~variable,
0.5, 0.5, "yes",
1, 0.5, "no") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable)) +
scale_alpha_discrete(range = c(0.5, 1)) +
theme_void()
tribble(~x, ~y, ~variable,
0.9, 0.5, "yes",
1, 0.5, "no") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable)) +
scale_alpha_discrete(range = c(0.5, 1)) +
theme_void()
tribble(~x, ~y, ~variable,
0.9, 0.5, "yes",
1, 0.5, "no") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable)) +
scale_alpha_discrete(range = c(0.5, 1)) +
theme_minmal()
tribble(~x, ~y, ~alpha, ~size, ~shape
0.9, 0.5, "yes", 1, "round",
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
theme_minmal()
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1))
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle")
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1))
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(2, 2.5))
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(2, 2.5)) +
scale_shape_discrete(values = c(21, 4))
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(2, 2.5)) +
scale_shape_discrete(values = c(21, 4)) +
theme_minimal()
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(2, 2.5)) +
scale_shape_manual(values = c(21, 4)) +
theme_minimal()
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(2, 2.5)) +
scale_shape_manual(values = c(21, 22)) +
theme_minimal()
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(1, 2.5)) +
scale_shape_manual(values = c(21, 22)) +
theme_minimal()
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(4, 7)) +
scale_shape_manual(values = c(21, 22)) +
theme_minimal()
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(4, 7)) +
scale_shape_manual(values = c(21, 22)) +
theme_void()
?guide_legend
?scale_color_manual
?scale_color_gradient
?scale_fill_discrete
?scale_fill_brewer()
?scale_color_gradient
?guide_legend
install.packages(c("dplyr", "fs", "lme4", "MASS", "modelsummary", "osmdata", "SnowballC", "spatstat", "spatstat.model", "terra", "vctrs", "xfun"))
library(mapsf)
library(tidyverse)
mtq <- mf_get_mtq()
View(mtq)
mf_map(x = mtq, col = "orange",
border = "white")
# Load general packages
library(tidyverse)
library(lubridate) # for dates and times
library(scales) # for scale layouts (breaks and labels)
##############
## PENGUINS ##
##############
# Load and assign data
library(palmerpenguins)
data <- penguins
# Take brief look
head(data)
# Calculate median and standard deviation for bill length and depth
data_summary <- data |>
group_by(species) |>
summarise(across(c(bill_length_mm, bill_depth_mm),
list(median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE))))
# Scatter plot with error bars by species
data |> ggplot(aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
# Error bars at the median with the standard deviations
# Attention: we take other data here with new aesthetics, so inherit.aes = F
geom_errorbar(
data = data_summary,
aes(x = bill_length_mm_median,
ymin = bill_depth_mm_median - bill_depth_mm_sd,
ymax = bill_depth_mm_median + bill_depth_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_errorbar(
data = data_summary,
aes(y = bill_depth_mm_median,
xmin = bill_length_mm_median - bill_length_mm_sd,
xmax = bill_length_mm_median + bill_length_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_point(size = 1.5, alpha = 0.5) +
scale_color_manual(name = NULL,
values = MetBrewer::met.brewer("Lakota")) +
scale_x_continuous(labels = scales::number_format(suffix="mm")) +
scale_y_continuous(labels = scales::number_format(suffix="mm", accuracy = 1)) +
# Add labels in the plot rather than in legend
annotate("text", x = c(34.7, 55.7, 50.7), y = c(20.7, 19, 13.6),
color = MetBrewer::met.brewer("Lakota")[1:3],
label = c("AdÃ©lie","Chinstrap","Gentoo"), fontface = "bold", size = 4) +
labs(x = "Bill length", y = "Bill depth",
title = "Penguins are awesome",
subtitle = "Depth and length of bills") +
theme_minimal() +
theme(legend.position = "none",
plot.title.position = "plot",
plot.title = element_text(size = 15),
plot.subtitle = element_text(size = 13),
panel.grid.minor = element_blank())
# Load general packages
library(tidyverse)
library(lubridate) # for dates and times
library(scales) # for scale layouts (breaks and labels)
# Load and assign data
library(palmerpenguins)
data <- penguins
# Take brief look
head(data)
# Calculate median and standard deviation for bill length and depth
data_summary <- data |>
group_by(species) |>
summarise(across(c(bill_length_mm, bill_depth_mm),
list(median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE))))
# Scatter plot with error bars by species
data |> ggplot(aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
# Error bars at the median with the standard deviations
# Attention: we take other data here with new aesthetics, so inherit.aes = F
geom_errorbar(
data = data_summary,
aes(x = bill_length_mm_median,
ymin = bill_depth_mm_median - bill_depth_mm_sd,
ymax = bill_depth_mm_median + bill_depth_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_errorbar(
data = data_summary,
aes(y = bill_depth_mm_median,
xmin = bill_length_mm_median - bill_length_mm_sd,
xmax = bill_length_mm_median + bill_length_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_point(size = 1.5, alpha = 0.5) +
scale_color_manual(name = NULL,
values = MetBrewer::met.brewer("Lakota")) +
scale_x_continuous(labels = scales::number_format(suffix="mm")) +
scale_y_continuous(labels = scales::number_format(suffix="mm", accuracy = 1)) +
# Add labels in the plot rather than in legend
annotate("text", x = c(34.7, 55.7, 50.7), y = c(20.7, 19, 13.6),
color = MetBrewer::met.brewer("Lakota")[1:3],
label = c("AdÃ©lie","Chinstrap","Gentoo"), fontface = "bold", size = 4) +
labs(x = "Bill length", y = "Bill depth",
title = "Penguins are awesome",
subtitle = "Depth and length of bills") +
theme_minimal() +
theme(legend.position = "none",
plot.title.position = "plot",
plot.title = element_text(size = 15),
plot.subtitle = element_text(size = 13),
panel.grid.minor = element_blank())
library(tidyverse)
library(lubridate) # for dates and times
library(scales) # for scale layouts (breaks and labels)
##############
## PENGUINS ##
##############
# Load and assign data
library(palmerpenguins)
data <- penguins
# Take brief look
head(data)
# Calculate median and standard deviation for bill length and depth
data_summary <- data |>
group_by(species) |>
summarise(across(c(bill_length_mm, bill_depth_mm),
list(median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE))))
# Scatter plot with error bars by species
data |> ggplot(aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
# Error bars at the median with the standard deviations
# Attention: we take other data here with new aesthetics, so inherit.aes = F
geom_errorbar(
data = data_summary,
aes(x = bill_length_mm_median,
ymin = bill_depth_mm_median - bill_depth_mm_sd,
ymax = bill_depth_mm_median + bill_depth_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_errorbar(
data = data_summary,
aes(y = bill_depth_mm_median,
xmin = bill_length_mm_median - bill_length_mm_sd,
xmax = bill_length_mm_median + bill_length_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_point(size = 1.5, alpha = 0.5) +
scale_color_manual(name = NULL,
values = MetBrewer::met.brewer("Lakota")) +
scale_x_continuous(labels = scales::number_format(suffix="mm")) +
scale_y_continuous(labels = scales::number_format(suffix="mm", accuracy = 1)) +
# Add labels in the plot rather than in legend
annotate("text", x = c(34.7, 55.7, 50.7), y = c(20.7, 19, 13.6),
color = MetBrewer::met.brewer("Lakota")[1:3],
label = c("AdÃ©lie","Chinstrap","Gentoo"), fontface = "bold", size = 4) +
labs(x = "Bill length", y = "Bill depth",
title = "Penguins are awesome",
subtitle = "Depth and length of bills") +
theme_minimal() +
theme(legend.position = "none",
plot.title.position = "plot",
plot.title = element_text(size = 15),
plot.subtitle = element_text(size = 13),
panel.grid.minor = element_blank())
install.packages("countrycode")
load("~/Downloads/10_climate.RData")
1166 * 2.48
2773 * 1.6
61300/14
5917*80+5917*80*0.05
500000*0.2
17860/57500
(22000 + 5*100*12)/61300
1000000*100000
1e6*1e5
23617/14
100/6
install.packages(c("gargle", "geometries", "ggfun", "ggimage", "labelled", "terra"))
530000000/52
5300000000/52
100000000/60000
clear
install.packages(c("EnvStats", "fontawesome", "gtable", "httr", "languageserver", "markdown", "quantreg", "rnaturalearth", "tikzDevice", "uuid", "yulab.utils"))
100000*0.005
500/12
2000000000/350000
5714.286/12
install.packages(c("classInt", "credentials", "DescTools", "foreign", "Hmisc", "insight", "knitr", "minqa", "performance", "spatstat.geom", "stars", "terra", "tmap", "units"))
1000000000/128000
38800000000/128000
100000*0.005
500/12
install.packages(c("classInt", "credentials", "datawizard", "DescTools", "foreign", "ggfun", "gtExtras", "Hmisc", "insight", "knitr", "leafem", "Matrix", "minqa", "performance", "rmarkdown", "spatstat.geom", "stars", "terra", "tmap", "units"))
4000000*0.781*10000
0.525/(0.525+4.303)
install.packages(c("Matrix", "pkgload", "rootSolve", "yulab.utils"))
test <- read.delim("~/Downloads/statistics_cites.tsv")
View(test)
test |> filter(available == "false") |> arrange(desc(cites)) |> View()
library(tidyverse)
test |> filter(available == "false") |> arrange(desc(cites)) |> View()
test |> filter(available == "false") |> count(journal)
test |> filter(available == "false", cites > 50) |> count(journal)
test |> filter(available == "false", year >= 2022) |> count(journal)
test |> filter(str_starts(journal, "Quarterly")) |> arrange(desc(year))
test |> filter(str_starts(journal, "Quarterly")) |> arrange(desc(year)) |> View()
test |> count(journal)
test |> filter(str_starts(journal, "Review")) |> count(year)
test |> filter(str_starts(journal, "Quarterly")) |> count(year)
test |> filter(available == "false", cites >= 100) |> count(journal)
test |> filter(available == "true", cites >= 100) |> count(journal)
853 + 4*4 + 10*4*4
100/6
install.packages(c("curl", "lattice", "markdown", "plyr", "sp", "tinytex", "vroom", "waffle"))
install.packages("epoxy")
install.packages(c("fansi", "grImport2", "gt", "htmltools", "systemfonts", "testthat", "textshaping"))
colors()
setwd("~/Daten/Lehre/wipol_viz_MA/data/assignments")
load("~/Daten/Lehre/wipol_viz_MA/data/assignments/inflation.csv")
library(readr)
inflation <- read_csv("inflation.csv")
View(inflation)
rawdata <- read.csv("inflation.csv")
View(rawdata)
# Open data by Statistics Austria: https://data.statistik.gv.at
rawdata <- read.csv2("https://data.statistik.gv.at/data/OGD_vpi15_VPI_2015_1.csv")
View(rawdata)
coicop <- read.csv2("https://data.statistik.gv.at/data/OGD_vpi15_VPI_2015_1_C-VPI5-0.csv")
View(coicop)
str_extract(rawdata$C.VPIZR.0, "(\\d)+"))
str_extract(rawdata$C.VPIZR.0, "(\\d)+")
# Let's learn a new way to load multiple packages
librarian::shelf(tidyverse, janitor, ggstream, ggtext)
str_extract(rawdata$C.VPIZR.0, "(\\d)+")
str_extract(rawdata$C.VPIZR.0, "(\\d+")
str_extract(rawdata$C.VPIZR.0, "\\d+")
?ggflag::geom_flag
?ggflags::geom_flag
test <- load("~/Downloads/05_labels.Rdata")
test
ls()
load("~/Downloads/05_labels.Rdata")
rawdat
