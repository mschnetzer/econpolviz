# Load and assign data
library(palmerpenguins)
data <- penguins
# Take brief look
head(data)
# Calculate median and standard deviation for bill length and depth
data_summary <- data |>
group_by(species) |>
summarise(across(c(bill_length_mm, bill_depth_mm),
list(median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE))))
# Scatter plot with error bars by species
data |> ggplot(aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
# Error bars at the median with the standard deviations
# Attention: we take other data here with new aesthetics, so inherit.aes = F
geom_errorbar(
data = data_summary,
aes(x = bill_length_mm_median,
ymin = bill_depth_mm_median - bill_depth_mm_sd,
ymax = bill_depth_mm_median + bill_depth_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_errorbar(
data = data_summary,
aes(y = bill_depth_mm_median,
xmin = bill_length_mm_median - bill_length_mm_sd,
xmax = bill_length_mm_median + bill_length_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_point(size = 1.5, alpha = 0.5) +
scale_color_manual(name = NULL,
values = MetBrewer::met.brewer("Lakota")) +
scale_x_continuous(labels = scales::number_format(suffix="mm")) +
scale_y_continuous(labels = scales::number_format(suffix="mm", accuracy = 1)) +
# Add labels in the plot rather than in legend
annotate("text", x = c(34.7, 55.7, 50.7), y = c(20.7, 19, 13.6),
color = MetBrewer::met.brewer("Lakota")[1:3],
label = c("Adélie","Chinstrap","Gentoo"), fontface = "bold", size = 4) +
labs(x = "Bill length", y = "Bill depth",
title = "Penguins are awesome",
subtitle = "Depth and length of bills") +
theme_minimal() +
theme(legend.position = "none",
plot.title.position = "plot",
plot.title = element_text(size = 15),
plot.subtitle = element_text(size = 13),
panel.grid.minor = element_blank())
# Load general packages
library(tidyverse)
library(lubridate) # for dates and times
library(scales) # for scale layouts (breaks and labels)
# Load and assign data
library(palmerpenguins)
data <- penguins
# Take brief look
head(data)
# Calculate median and standard deviation for bill length and depth
data_summary <- data |>
group_by(species) |>
summarise(across(c(bill_length_mm, bill_depth_mm),
list(median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE))))
# Scatter plot with error bars by species
data |> ggplot(aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
# Error bars at the median with the standard deviations
# Attention: we take other data here with new aesthetics, so inherit.aes = F
geom_errorbar(
data = data_summary,
aes(x = bill_length_mm_median,
ymin = bill_depth_mm_median - bill_depth_mm_sd,
ymax = bill_depth_mm_median + bill_depth_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_errorbar(
data = data_summary,
aes(y = bill_depth_mm_median,
xmin = bill_length_mm_median - bill_length_mm_sd,
xmax = bill_length_mm_median + bill_length_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_point(size = 1.5, alpha = 0.5) +
scale_color_manual(name = NULL,
values = MetBrewer::met.brewer("Lakota")) +
scale_x_continuous(labels = scales::number_format(suffix="mm")) +
scale_y_continuous(labels = scales::number_format(suffix="mm", accuracy = 1)) +
# Add labels in the plot rather than in legend
annotate("text", x = c(34.7, 55.7, 50.7), y = c(20.7, 19, 13.6),
color = MetBrewer::met.brewer("Lakota")[1:3],
label = c("Adélie","Chinstrap","Gentoo"), fontface = "bold", size = 4) +
labs(x = "Bill length", y = "Bill depth",
title = "Penguins are awesome",
subtitle = "Depth and length of bills") +
theme_minimal() +
theme(legend.position = "none",
plot.title.position = "plot",
plot.title = element_text(size = 15),
plot.subtitle = element_text(size = 13),
panel.grid.minor = element_blank())
library(tidyverse)
library(lubridate) # for dates and times
library(scales) # for scale layouts (breaks and labels)
##############
## PENGUINS ##
##############
# Load and assign data
library(palmerpenguins)
data <- penguins
# Take brief look
head(data)
# Calculate median and standard deviation for bill length and depth
data_summary <- data |>
group_by(species) |>
summarise(across(c(bill_length_mm, bill_depth_mm),
list(median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE))))
# Scatter plot with error bars by species
data |> ggplot(aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
# Error bars at the median with the standard deviations
# Attention: we take other data here with new aesthetics, so inherit.aes = F
geom_errorbar(
data = data_summary,
aes(x = bill_length_mm_median,
ymin = bill_depth_mm_median - bill_depth_mm_sd,
ymax = bill_depth_mm_median + bill_depth_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_errorbar(
data = data_summary,
aes(y = bill_depth_mm_median,
xmin = bill_length_mm_median - bill_length_mm_sd,
xmax = bill_length_mm_median + bill_length_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_point(size = 1.5, alpha = 0.5) +
scale_color_manual(name = NULL,
values = MetBrewer::met.brewer("Lakota")) +
scale_x_continuous(labels = scales::number_format(suffix="mm")) +
scale_y_continuous(labels = scales::number_format(suffix="mm", accuracy = 1)) +
# Add labels in the plot rather than in legend
annotate("text", x = c(34.7, 55.7, 50.7), y = c(20.7, 19, 13.6),
color = MetBrewer::met.brewer("Lakota")[1:3],
label = c("Adélie","Chinstrap","Gentoo"), fontface = "bold", size = 4) +
labs(x = "Bill length", y = "Bill depth",
title = "Penguins are awesome",
subtitle = "Depth and length of bills") +
theme_minimal() +
theme(legend.position = "none",
plot.title.position = "plot",
plot.title = element_text(size = 15),
plot.subtitle = element_text(size = 13),
panel.grid.minor = element_blank())
library(ggplot2)
library(tidyverse)
library(dplyr)
library(showtext)
income_inequalities<- read.csv("~/Downloads/incomeineq.csv")
income_inequalities
income_ineq_eu <- subset(income_inequalities, geo == "AT" | geo == "BE" | geo == "BG" |
geo == "DE" | geo == "EE" | geo == "EL" | geo == "ES" |
geo == "FI" | geo == "FR" | geo == "HU" | geo == "IE" |
geo == "IT" | geo == "LT" | geo == "LU" | geo == "LU" |
geo == "LV" | geo == "MT" | geo == "NL" | geo == "PL" |
geo == "PT" | geo == "RO" | geo == "SI")
income_ineq_eu_2000_2020 <- subset(income_ineq_eu, 1999 < TIME_PERIOD & TIME_PERIOD < 2021 )
income_ineq_eu_2000_2020
final_income_ineq_eu_2000_2020 <- subset(income_ineq_eu_2000_2020, TIME_PERIOD == 2000 | TIME_PERIOD == 2020)
final_income_ineq_eu_2000_2020
final_income_ineq_eu_2000_2020$TIME_PERIOD <- as.character(final_income_ineq_eu_2000_2020$TIME_PERIOD)
final_income_ineq_eu_2000_2020$TIME_PERIOD
ggplot(data = final_income_ineq_eu_2000_2020, aes(x= geo, y = OBS_VALUE)) +
geom_line(size = 3, alpha = 0.8, colour = "lightgray") +
labs(title = "Change in income inequality in Europe",
subtitle = "Gini coefficient of disposable household income, 2000-2020",
caption ="Source: Eurostat. Figure: Chiara Kahler", y = "Gini Index", x = NULL)+
theme_minimal() +
theme(panel.grid.minor = element_blank())+
theme(plot.title = element_text(size = 22, face = "bold"))+
theme(plot.subtitle = element_text(size = 15, face = "plain"))+
geom_point(data = final_income_ineq_eu_2000_2020,
aes(x = geo, y = OBS_VALUE, color=TIME_PERIOD), size = 3.2)+
scale_color_manual(values = c("orange2", "darkblue"))+
theme(legend.title = element_blank(),
legend.position = c(0.8, 0.9),
legend.direction = "horizontal",
legend.text = element_text(size = 14))
getwd()
setwd("~/Daten/Lehre/wipol_advanced_BA/data/assignments")
library(tidyverse)
# Load data
raw <- read_csv("incomeineq.csv")
# Show all available countries, but we don't want country groups (EA18, EU15, etc.)
unique(raw$geo)
filtered <- raw |> filter(str_length(geo) < 3, TIME_PERIOD %in% c(2000,2020))
# Not all countries have both years available -> filter those with both values!
filtered |> count(geo)
plotdata <- filtered |> filter(n() > 1, .by = geo)
plotdata |>
ggplot(aes(x = geo, y = OBS_VALUE)) +
geom_line(aes(group = geo), linewidth = 3, color = "gray90") +
geom_point(aes(color = factor(TIME_PERIOD)), size = 3) +
scale_color_manual(name = NULL, values = c("goldenrod1","midnightblue"),
guide = guide_legend(direction = "horizontal")) +
labs(x = NULL, y = "Gini index", title = "Change in income inequality in Europe",
subtitle = "Gini coefficient of disposable household income, 2000-2020",
caption = "Source: Eurostat. Figure: @matschnetzer") +
theme_minimal() +
theme(legend.position = c(0.8,0.9),
plot.title.position = "plot",
plot.caption = element_text(size = 7, margin = margin(t = 1, unit = "lines")),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linewidth = 0.2))
librarian::shelf(tidyverse, readxl, countrycode, ggtext, MetBrewer)
# Load original data from ECB: https://www.ecb.europa.eu/home/pdf/research/hfcn/HFCS_Statistical_tables_Wave_2017_May2021.zip?078368a4438f4d94712367f6615445aa
hfcs <- readxl::read_xlsx("~/Downloads/HFCS_Statistical_tables_Wave 2017_May2021.xlsx",
sheet = "J3 Net wealth per household ", range = "A4:Z24") |>
janitor::clean_names() |>
rename(measure = x1) |> select(-x2, -x3) |>
filter(measure %in% c("Mean", "p20", "p50", "p80")) |>
mutate(across(-measure, as.numeric))
hfcs
save(hfcs, "08_wealth.RData")
save(hfcs, file = "08_wealth.RData")
getwd()
install.packages(c("httpuv", "tzdb"))
librarian::shelf(tidyverse, readxl, countrycode, ggtext, MetBrewer)
setwd("~/Daten/Lehre/wipol_advanced_BA/data/code")
load("08_wealth.RData")
hfcs
# Data into long format with "pivot_longer", capitalize country codes with "toupper" and merge country names from countrycode package with "left_join"
findat <- hfcs |>
pivot_longer(-measure, names_to = "country", values_to = "value") |>
mutate(across(c(country, measure), toupper)) |>
left_join(countrycode::codelist |> select(iso2c, country.name.en),
by = c("country" = "iso2c")) |>
mutate(country.name.en = ifelse(country == "EURO_AREA", "Euro Area", country.name.en),
country.name.en = fct_reorder(country.name.en, value))
findat |>
ggplot(aes(x = country.name.en, y = value, group = country, color = measure)) +
geom_line(color = "gray90", alpha = 0.15, linewidth = 2) +
geom_point(size = 2) +
scale_color_manual(values = met.brewer("Isfahan2"),
guide = guide_legend(override.aes = list(size = 4))) +
scale_y_continuous(labels = scales::number_format(prefix = "€", suffix = "K")) +
coord_flip() +
labs(x = NULL, y = NULL, color = NULL,
title = "Who are the <span style='color:gold;'>**richest**</span> Europeans?",
subtitle = "Percentiles of net wealth distributions in thousand Euros",
caption = "Data: HFCS 2017, ECB. Figure: @matschnetzer") +
theme_minimal(base_family = "Roboto Condensed") +
theme(plot.background = element_rect(fill = "black"),
plot.margin = margin(t = 1, b = 1, l = 1, r = 1, unit = "lines"),
plot.title.position = "plot",
plot.title = element_markdown(size = 20),
plot.subtitle = element_text(margin = margin(b = 1, unit = "lines")),
plot.caption = element_text(margin = margin(t = 2, unit = "lines"), size = 7),
panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_line(linewidth = 0.1, color = "gray80"),
legend.position = c(0.65, 0.3),
text = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.text.y = element_text(size = 8))
# Load the tidyverse
library(tidyverse)
# Load library
library(palmerpenguins)
# Assign data
data <- penguins
# Take a look at the data
head(data)
View(data)
# What are the specific classes of the variables
glimpse(data)
levels(data$species)
# Show some descriptive statistics
summary(data$bill_length_mm) # There are 2 NA values
mean(data$bill_length_mm, na.rm = T)
sd(data$bill_length_mm, na.rm = T)
# The summary command even works for factor variables
summary(data$species)
# Basic tidyr: filter and select. Use a pipe!
data |> select(species, island)
data |> filter(species == "Adelie")
data |> filter(species %in% c("Adelie","Gentoo"))
# Select and rename
data |> select(Art = species, Insel = island, Geschlecht = sex)
# Counting
data |> count(island)
data |> count(species, island)
data |> count(species, island, .drop = FALSE)
# Calculate summarise statistics
data |> summarise(meanbill = mean(bill_length_mm, na.rm = T),
sdbill = sd(bill_length_mm, na.rm = T),
meanflipper = mean(flipper_length_mm, na.rm = T),
sdflipper = sd(flipper_length_mm, na.rm = T))
# Summary statistics by group
data |> group_by(species) |>
summarise(meanbill = mean(bill_length_mm, na.rm = T))
data |> summarise(meanbill = mean(bill_length_mm, na.rm = T), .by = species)
# Median body mass
data |> summarise(median = median(body_mass_g, na.rm = T),
medianq = quantile(body_mass_g, probs = 0.5, na.rm = T))
# Summary statistic for selected variable type
data |> summarise(across(c(bill_length_mm, bill_depth_mm), ~mean(., na.rm = T)))
data |> summarise(across(where(is.numeric), ~mean(., na.rm = T)))
# Control with nice select function
data |> select(contains("length")) # other options: starts_with; ends_with
data |> summarise(across(contains("length"), ~mean(., na.rm = T)))
# Drop observations with missing values (and save)
data <- data |> drop_na()
# Create new variables with mutate (and don't forget to save in dataset)
data <- data |> mutate(totallength = bill_length_mm + flipper_length_mm)
data <- data |> mutate(color = case_when(sex == "male" ~ "darkgreen",
sex == "female" ~ "darkred"))
# Arrange data by column in descending order
data |> arrange(desc(bill_length_mm))
# Get top 3 observations for bill length by species
top3 <- data |> slice_max(bill_length_mm, n = 3, by = species)
# Get bottom 10% of observations with smallest bill length
top10p <- data |> slice_min(bill_length_mm, prop = 0.1)
# Let's learn a new way to load multiple packages
librarian::shelf(tidyverse, janitor, ggstream, ggtext)
# Open data by Statistics Austria: https://data.statistik.gv.at
rawdata <- read.csv2("https://data.statistik.gv.at/data/OGD_vpi15_VPI_2015_1.csv")
labels <- read.csv2("https://data.statistik.gv.at/data/OGD_vpi15_VPI_2015_1_HEADER.csv")
coicop <- read.csv2("https://data.statistik.gv.at/data/OGD_vpi15_VPI_2015_1_C-VPI5-0.csv")
inflation <- rawdata |>
mutate(date = ym(str_extract(C.VPIZR.0, "(\\d)+"))) |>
left_join(coicop |> select(code, en_name), by = c("C.VPI5.0"="code")) |>
select(date, coicop = en_name, contribution = F.VPIEFVJM) |>
drop_na() |>
pivot_wider(names_from = coicop, values_from = contribution) |>
clean_names()
# Summarize COICOP categories and reshape for ggplot (long format)
plotdat <- inflation |>
mutate(`Housing & Energy` = x04_housing_water_electricity_gas_and_other_fuels +
x05_furnishings_household_equipment_and_routine_maintenance_of_the_house,
Others = x02_alcoholic_beverages_tobacco_and_narcotics + x03_clothing_and_footwear +
x06_health + x08_communication + x10_education +
x12_miscellaneous_goods_and_services) |>
select(Date = date,
Inflation = total_index_according_to_coicop,
Food = x01_food_and_non_alcoholic_beverages,
`Housing & Energy`,
Transport = x07_transport,
`Recreation & Culture` = x09_recreation_and_culture,
`Restaurants & Hotels` = x11_restaurants_and_hotels,
Others) |>
pivot_longer(cols = -Date, names_to = "Coicop", values_to = "Contribution") |>
mutate(Coicop = fct_relevel(Coicop, "Inflation", "Others", "Transport", "Recreation & Culture", "Restaurants & Hotels", "Food", "Housing & Energy")) |>
filter(Date >= "2019-01-01")
# Let's test the data
plotdat |> slice_max(Date, n=1)
plotdat |> slice_max(Date, n=1) |> filter(Coicop != "Inflation") |>
summarise(sum(Contribution))
baseplot <- plotdat |> filter(!Coicop == "Inflation") |>
ggplot(aes(x = Date, y = Contribution, group = Coicop, fill = Coicop)) +
geom_stream(type = "mirror") +
scale_x_date(date_labels = "%b %y", position = "top", breaks = "4 months") +
coord_flip(expand = F) +
labs(x=NULL, y=NULL) +
annotate("label", x = as.Date("2020-11-01"), y = -5.3, hjust = 0,
label = "Inflation in Austria", family = "Playfair Display", size = 5,
label.size = NA) +
annotate("text_box", x = as.Date("2020-10-01"), y = -5.3, hjust = 0, vjust = 1,
label = "The figure shows contributions of selected COICOP consumption categories to the aggregate CPI. The values depict year-on-year changes.",
family = "Raleway", size = 3, color = "gray20", width = unit(5.2, "cm"),
box.colour = NA) +
theme_minimal() +
theme(legend.position = c(0.8,0.27),
legend.background = element_rect(fill = "white", colour = NA),
legend.text = element_text(size = 9, family = "Raleway"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(linewidth = 0.2),
axis.text.y = element_text(color = "gray50", size = 7, family = "Raleway"),
axis.text.x = element_blank())
baseplot
# Load some color libraries
library(colorspace)
library(RColorBrewer)
library(MetBrewer)
library(wesanderson)
library(futurevisions)
library(viridis)
# Common RColorBrewer palette
baseplot + scale_fill_manual(values = c("gray90", brewer.pal(name="Accent", n=5)),
name = "", guide = guide_legend(reverse = TRUE, keywidth = 0.5))
# You can lighten or darken the palette with the colorspace package
baseplot + scale_fill_manual(values = c("gray90", darken(brewer.pal(name="Accent", n=5), .3)),
name = "", guide = guide_legend(reverse = TRUE, keywidth = 0.5))
# Nice MetBrewer palette: https://github.com/BlakeRMills/MetBrewer
baseplot + scale_fill_manual(values = c("gray90", met.brewer("Juarez")[-4]),
name = "", guide = guide_legend(reverse = TRUE, keywidth = 0.5))
# Lighten the palette
baseplot + scale_fill_manual(values = c("gray90", lighten(met.brewer("Juarez")[-4], .1)),
name = "", guide = guide_legend(reverse = TRUE, keywidth = 0.5))
# Meet the wesanderson palette: https://github.com/karthik/wesanderson
baseplot + scale_fill_manual(values = c("gray90", wes_palette("Zissou1")),
name = "", guide = guide_legend(reverse = TRUE, keywidth = 0.5))
# Futurevisions is also awesome: https://github.com/JoeyStanley/futurevisions
baseplot + scale_fill_manual(values = c("gray90", futurevisions("cancri")),
name = "", guide = guide_legend(reverse = TRUE, keywidth = 0.5))
# Viridis colorblind-friendly palette
baseplot + scale_fill_manual(values = viridis(n=6, option = "B",  direction = -1),
name = "", guide = guide_legend(reverse = TRUE, keywidth = 0.5))
baseplot + scale_fill_manual(values = viridis(n=6, option = "D",  direction = -1),
name = "", guide = guide_legend(reverse = TRUE, keywidth = 0.5))
# remotes::install_github("https://github.com/jimjam-slam/ggflags")
library(ggflags)
library(gghighlight)
# Load local data
load("05_inflation.RData")
setwd("~/Daten/Lehre/wipol_viz_MA/data/code")
# Load local data
load("05_inflation.RData")
euinfdata |> filter(time >= "2020-01-01") |>
ggplot(aes(x = time, y= values, color = geo.de)) +
geom_hline(yintercept = 0, linewidth = 0.1, color = "gray40") +
geom_line(linewidth = 0.8, aes(group = geo)) +
gghighlight(unhighlighted_params = list(color = "gray80", linewidth = 0.2), use_direct_label = F) +
geom_label(data = euinfdata |> slice_max(time, n=1), size = 2.3,
aes(label = glue::glue("{round(values,1)}%")), nudge_y = -0.5,
nudge_x = 20, label.padding = unit(0.15,"lines"), fill = "gray98") +
geom_label(data = euinfdata |> slice_max(values, n=1, with_ties = F ,by = geo), size = 2.3,
aes(label = glue::glue("{round(values,1)}%")),
nudge_y = 1, label.padding = unit(0.15,"lines"), fill = "gray98") +
geom_flag(data = euinfdata |> slice_min(time, n=1), size = 5,
aes(x = as.Date("2020-04-01"), y = 5, country = tolower(iso2c))) +
geom_text(data = euinfdata |> slice_min(time, n=1), size = 3, hjust = 0,
aes(x = as.Date("2020-06-01"), y = 5, label = toupper(geo))) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
scale_x_date(limits = c(NA_Date_, as.Date("2023-05-01"))) +
scale_color_manual(values = met.brewer("Tiepolo")) +
facet_wrap(~geo.de) +
labs(x = NULL, y = NULL,
title = "Inflation roller coaster",
subtitle = "Harmonised inflation rates (HIPC) for selected European countries",
caption = "Source: Eurostat. Figure: @matschnetzer") +
theme_minimal(base_family = "Roboto Condensed", base_size = 8) +
theme(legend.position = "none",
plot.title.position = "plot",
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 11, margin = margin(b=1, unit="lines")),
strip.background = element_blank(),
strip.text.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linewidth = 0.2),
panel.spacing.x = unit(1.5, "lines"),
panel.spacing.y = unit(1, "lines"))
# Load local data
load("05_inflation.RData")
# Load local data
load("04_colors.RData")
euinfdata |> filter(time >= "2020-01-01") |>
ggplot(aes(x = time, y= values, color = geo.de)) +
geom_hline(yintercept = 0, linewidth = 0.1, color = "gray40") +
geom_line(linewidth = 0.8, aes(group = geo)) +
gghighlight(unhighlighted_params = list(color = "gray80", linewidth = 0.2), use_direct_label = F) +
geom_label(data = euinfdata |> slice_max(time, n=1), size = 2.3,
aes(label = glue::glue("{round(values,1)}%")), nudge_y = -0.5,
nudge_x = 20, label.padding = unit(0.15,"lines"), fill = "gray98") +
geom_label(data = euinfdata |> slice_max(values, n=1, with_ties = F ,by = geo), size = 2.3,
aes(label = glue::glue("{round(values,1)}%")),
nudge_y = 1, label.padding = unit(0.15,"lines"), fill = "gray98") +
geom_flag(data = euinfdata |> slice_min(time, n=1), size = 5,
aes(x = as.Date("2020-04-01"), y = 5, country = tolower(iso2c))) +
geom_text(data = euinfdata |> slice_min(time, n=1), size = 3, hjust = 0,
aes(x = as.Date("2020-06-01"), y = 5, label = toupper(geo))) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
scale_x_date(limits = c(NA_Date_, as.Date("2023-05-01"))) +
scale_color_manual(values = met.brewer("Tiepolo")) +
facet_wrap(~geo.de) +
labs(x = NULL, y = NULL,
title = "Inflation roller coaster",
subtitle = "Harmonised inflation rates (HIPC) for selected European countries",
caption = "Source: Eurostat. Figure: @matschnetzer") +
theme_minimal(base_family = "Roboto Condensed", base_size = 8) +
theme(legend.position = "none",
plot.title.position = "plot",
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 11, margin = margin(b=1, unit="lines")),
strip.background = element_blank(),
strip.text.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linewidth = 0.2),
panel.spacing.x = unit(1.5, "lines"),
panel.spacing.y = unit(1, "lines"))
