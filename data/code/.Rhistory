energie$tabulate() |> filter(str_starts(`Coicop 5-Steller`, "04.5"))) |>
as.data.frame()
View(fin)
plotdat <- fin |>
drop_na() |>
rename(Datum=`Zeitraum der Erhebung`) |>
mutate(Datum = str_replace_all(Datum, "Jän", "Jan"),
Datum = dmy(paste("01", Datum), locale = "de_DE")) |>
pivot_wider(names_from = "Coicop 5-Steller", values_from = "Einfluss Vorjahresmonat") |>
clean_names() |>
mutate(`Wohnen & Haushalt` = x04_wohnung_wasser_energie - x04_5_aufwand_fur_energie +
x05_hausrat_instandhaltung_des_hauses,
Sonstige = x02_alkoholische_getranke_und_tabak + x03_bekleidung_und_schuhe +
x06_gesundheitspflege + x08_nachrichtenubermittlung +
x10_erziehung_und_unterricht + x12_verschiedene_waren_dienstleistungen) |>
select(Datum = datum,
Nahrungsmittel = x01_nahrungsmittel_alkoholfr_getranke,
`Wohnen & Haushalt`,
Energie = x04_5_aufwand_fur_energie,
Verkehr = x07_verkehr,
`Freizeit & Kultur` = x09_freizeit_und_kultur,
`Restaurants & Hotels` = x11_restaurants_und_hotels,
Sonstige)  |>
mutate(Inflation = rowSums(across(where(is.numeric)))) |>
pivot_longer(cols = -Datum, names_to = "Coicop", values_to = "Beitrag") |>
mutate(Coicop = factor(Coicop, levels = c("Sonstige", "Restaurants & Hotels","Freizeit & Kultur","Nahrungsmittel","Energie", "Wohnen & Haushalt", "Verkehr", "Inflation")))
lastdate <- plotdat |> slice_max(Datum, n=1) |>
filter(Coicop == "Inflation")
firstdate <- plotdat |> slice_min(Datum, n=1) |>
filter(Coicop == "Inflation")
maxinflation <- plotdat |> filter(Coicop == "Inflation") |>
slice_max(Beitrag, n=1) |> pull(Beitrag)
pal <- met.brewer("Lakota")[c(3,2,1,5)]
cols <- c(rbind(darken(pal, 0.1), lighten(pal, 0.2)))
plotdat |> filter(!Coicop == "Inflation") |>
ggplot(aes(x = Datum, y = Beitrag, group = Coicop, fill = Coicop)) +
geom_stream(type = "mirror", bw = 0.6, sorting = "onset") +
scale_fill_manual(values = c(cols[1:6], "gray80"),
name = "", guide = guide_legend(reverse = F, keywidth = 0.5)) +
scale_x_date(date_labels = "%b %y", position = "top",
breaks = seq(firstdate$Datum, lastdate$Datum, by="6 months")) +
coord_cartesian(expand = F, xlim = c(firstdate$Datum - 60, lastdate$Datum + 60),
ylim = c(-maxinflation/2, maxinflation/2)) +
labs(x=NULL, y=NULL) +
theme_ms() +
theme(legend.position = "right",
legend.background = element_rect(fill = "white", colour = NA),
legend.text = element_text(size = 7, family = "Raleway"),
panel.grid.major.y = element_blank(),
axis.text.x = element_text(family = "Raleway", color = "gray50", size = 7),
axis.text.y = element_blank())
library(eurostat)
library(gghighlight)
library(ggrepel)
library(ggflags)
eudat <- get_eurostat(id = "prc_hicp_manr", type = "label",
filters = list(geo = c("AT","DE","ES","FR","IT","BE")))
eudat <- get_eurostat(id = "prc_hicp_manr", type = "label",
filters = list(geo = c("AT","DE","ES","FR","IT","BE")))
plotdat <- eudat |> filter(coicop == "All-items HICP") |>
mutate(geo = ifelse(str_detect(geo, "Germany"), "Germany", geo)) |>
left_join(countrycode::codelist |> select(country.name.en, geo.de = country.name.de, iso2c),
by = c("geo" = "country.name.en"))
View(plotdat)
librarian::shelf(tidyverse, ggtext, eurostat, MetBrewer)
tribble(~x, ~y, ~variable,
0.5, 0.5, 1,
1, 1, 0) |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable)) +
scale_alpha_discrete(values = c(0.5, 1))
?tribble
tribble(~x, ~y, ~variable,
0.5, 0.5, "yes",
1, 1, "no") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable)) +
scale_alpha_discrete(values = c(0.5, 1))
tribble(~x, ~y, ~variable,
0.5, 0.5, "yes",
1, 1, "no") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable))
?scale_alpha_discrete
scale_alpha_discrete(range = c(0.5, 1))
tribble(~x, ~y, ~variable,
0.5, 0.5, "yes",
1, 1, "no") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable)) +
scale_alpha_discrete(range = c(0.5, 1))
tribble(~x, ~y, ~variable,
0.5, 0.5, "yes",
1, 0.5, "no") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable)) +
scale_alpha_discrete(range = c(0.5, 1)) +
theme_void()
tribble(~x, ~y, ~variable,
0.9, 0.5, "yes",
1, 0.5, "no") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable)) +
scale_alpha_discrete(range = c(0.5, 1)) +
theme_void()
tribble(~x, ~y, ~variable,
0.9, 0.5, "yes",
1, 0.5, "no") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable)) +
scale_alpha_discrete(range = c(0.5, 1)) +
theme_minmal()
tribble(~x, ~y, ~alpha, ~size, ~shape
0.9, 0.5, "yes", 1, "round",
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
theme_minmal()
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = variable, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1))
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle")
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1))
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(2, 2.5))
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(2, 2.5)) +
scale_shape_discrete(values = c(21, 4))
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(2, 2.5)) +
scale_shape_discrete(values = c(21, 4)) +
theme_minimal()
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(2, 2.5)) +
scale_shape_manual(values = c(21, 4)) +
theme_minimal()
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(2, 2.5)) +
scale_shape_manual(values = c(21, 22)) +
theme_minimal()
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(1, 2.5)) +
scale_shape_manual(values = c(21, 22)) +
theme_minimal()
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(4, 7)) +
scale_shape_manual(values = c(21, 22)) +
theme_minimal()
tribble(~x, ~y, ~alpha, ~size, ~shape,
0.9, 0.5, "yes", 1, "round",
1, 0.5, "no", 2, "triangle") |>
ggplot(aes(x = x, y = y)) +
geom_point(aes(alpha = alpha, size = size, shape = shape)) +
scale_alpha_discrete(range = c(0.5, 1)) +
scale_size_continuous(range = c(4, 7)) +
scale_shape_manual(values = c(21, 22)) +
theme_void()
?guide_legend
?scale_color_manual
?scale_color_gradient
?scale_fill_discrete
?scale_fill_brewer()
?scale_color_gradient
?guide_legend
install.packages(c("dplyr", "fs", "lme4", "MASS", "modelsummary", "osmdata", "SnowballC", "spatstat", "spatstat.model", "terra", "vctrs", "xfun"))
library(mapsf)
library(tidyverse)
mtq <- mf_get_mtq()
View(mtq)
mf_map(x = mtq, col = "orange",
border = "white")
# Load general packages
library(tidyverse)
library(lubridate) # for dates and times
library(scales) # for scale layouts (breaks and labels)
##############
## PENGUINS ##
##############
# Load and assign data
library(palmerpenguins)
data <- penguins
# Take brief look
head(data)
# Calculate median and standard deviation for bill length and depth
data_summary <- data |>
group_by(species) |>
summarise(across(c(bill_length_mm, bill_depth_mm),
list(median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE))))
# Scatter plot with error bars by species
data |> ggplot(aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
# Error bars at the median with the standard deviations
# Attention: we take other data here with new aesthetics, so inherit.aes = F
geom_errorbar(
data = data_summary,
aes(x = bill_length_mm_median,
ymin = bill_depth_mm_median - bill_depth_mm_sd,
ymax = bill_depth_mm_median + bill_depth_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_errorbar(
data = data_summary,
aes(y = bill_depth_mm_median,
xmin = bill_length_mm_median - bill_length_mm_sd,
xmax = bill_length_mm_median + bill_length_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_point(size = 1.5, alpha = 0.5) +
scale_color_manual(name = NULL,
values = MetBrewer::met.brewer("Lakota")) +
scale_x_continuous(labels = scales::number_format(suffix="mm")) +
scale_y_continuous(labels = scales::number_format(suffix="mm", accuracy = 1)) +
# Add labels in the plot rather than in legend
annotate("text", x = c(34.7, 55.7, 50.7), y = c(20.7, 19, 13.6),
color = MetBrewer::met.brewer("Lakota")[1:3],
label = c("Adélie","Chinstrap","Gentoo"), fontface = "bold", size = 4) +
labs(x = "Bill length", y = "Bill depth",
title = "Penguins are awesome",
subtitle = "Depth and length of bills") +
theme_minimal() +
theme(legend.position = "none",
plot.title.position = "plot",
plot.title = element_text(size = 15),
plot.subtitle = element_text(size = 13),
panel.grid.minor = element_blank())
# Load general packages
library(tidyverse)
library(lubridate) # for dates and times
library(scales) # for scale layouts (breaks and labels)
# Load and assign data
library(palmerpenguins)
data <- penguins
# Take brief look
head(data)
# Calculate median and standard deviation for bill length and depth
data_summary <- data |>
group_by(species) |>
summarise(across(c(bill_length_mm, bill_depth_mm),
list(median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE))))
# Scatter plot with error bars by species
data |> ggplot(aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
# Error bars at the median with the standard deviations
# Attention: we take other data here with new aesthetics, so inherit.aes = F
geom_errorbar(
data = data_summary,
aes(x = bill_length_mm_median,
ymin = bill_depth_mm_median - bill_depth_mm_sd,
ymax = bill_depth_mm_median + bill_depth_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_errorbar(
data = data_summary,
aes(y = bill_depth_mm_median,
xmin = bill_length_mm_median - bill_length_mm_sd,
xmax = bill_length_mm_median + bill_length_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_point(size = 1.5, alpha = 0.5) +
scale_color_manual(name = NULL,
values = MetBrewer::met.brewer("Lakota")) +
scale_x_continuous(labels = scales::number_format(suffix="mm")) +
scale_y_continuous(labels = scales::number_format(suffix="mm", accuracy = 1)) +
# Add labels in the plot rather than in legend
annotate("text", x = c(34.7, 55.7, 50.7), y = c(20.7, 19, 13.6),
color = MetBrewer::met.brewer("Lakota")[1:3],
label = c("Adélie","Chinstrap","Gentoo"), fontface = "bold", size = 4) +
labs(x = "Bill length", y = "Bill depth",
title = "Penguins are awesome",
subtitle = "Depth and length of bills") +
theme_minimal() +
theme(legend.position = "none",
plot.title.position = "plot",
plot.title = element_text(size = 15),
plot.subtitle = element_text(size = 13),
panel.grid.minor = element_blank())
library(tidyverse)
library(lubridate) # for dates and times
library(scales) # for scale layouts (breaks and labels)
##############
## PENGUINS ##
##############
# Load and assign data
library(palmerpenguins)
data <- penguins
# Take brief look
head(data)
# Calculate median and standard deviation for bill length and depth
data_summary <- data |>
group_by(species) |>
summarise(across(c(bill_length_mm, bill_depth_mm),
list(median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE))))
# Scatter plot with error bars by species
data |> ggplot(aes(x = bill_length_mm,
y = bill_depth_mm,
color = species)) +
# Error bars at the median with the standard deviations
# Attention: we take other data here with new aesthetics, so inherit.aes = F
geom_errorbar(
data = data_summary,
aes(x = bill_length_mm_median,
ymin = bill_depth_mm_median - bill_depth_mm_sd,
ymax = bill_depth_mm_median + bill_depth_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_errorbar(
data = data_summary,
aes(y = bill_depth_mm_median,
xmin = bill_length_mm_median - bill_length_mm_sd,
xmax = bill_length_mm_median + bill_length_mm_sd,
color = species,
color = after_scale(colorspace::darken(color, .2, space = "combined"))
),
inherit.aes = F, width = .8, size = .8
) +
geom_point(size = 1.5, alpha = 0.5) +
scale_color_manual(name = NULL,
values = MetBrewer::met.brewer("Lakota")) +
scale_x_continuous(labels = scales::number_format(suffix="mm")) +
scale_y_continuous(labels = scales::number_format(suffix="mm", accuracy = 1)) +
# Add labels in the plot rather than in legend
annotate("text", x = c(34.7, 55.7, 50.7), y = c(20.7, 19, 13.6),
color = MetBrewer::met.brewer("Lakota")[1:3],
label = c("Adélie","Chinstrap","Gentoo"), fontface = "bold", size = 4) +
labs(x = "Bill length", y = "Bill depth",
title = "Penguins are awesome",
subtitle = "Depth and length of bills") +
theme_minimal() +
theme(legend.position = "none",
plot.title.position = "plot",
plot.title = element_text(size = 15),
plot.subtitle = element_text(size = 13),
panel.grid.minor = element_blank())
library(ggplot2)
library(tidyverse)
library(dplyr)
library(showtext)
income_inequalities<- read.csv("~/Downloads/incomeineq.csv")
income_inequalities
income_ineq_eu <- subset(income_inequalities, geo == "AT" | geo == "BE" | geo == "BG" |
geo == "DE" | geo == "EE" | geo == "EL" | geo == "ES" |
geo == "FI" | geo == "FR" | geo == "HU" | geo == "IE" |
geo == "IT" | geo == "LT" | geo == "LU" | geo == "LU" |
geo == "LV" | geo == "MT" | geo == "NL" | geo == "PL" |
geo == "PT" | geo == "RO" | geo == "SI")
income_ineq_eu_2000_2020 <- subset(income_ineq_eu, 1999 < TIME_PERIOD & TIME_PERIOD < 2021 )
income_ineq_eu_2000_2020
final_income_ineq_eu_2000_2020 <- subset(income_ineq_eu_2000_2020, TIME_PERIOD == 2000 | TIME_PERIOD == 2020)
final_income_ineq_eu_2000_2020
final_income_ineq_eu_2000_2020$TIME_PERIOD <- as.character(final_income_ineq_eu_2000_2020$TIME_PERIOD)
final_income_ineq_eu_2000_2020$TIME_PERIOD
ggplot(data = final_income_ineq_eu_2000_2020, aes(x= geo, y = OBS_VALUE)) +
geom_line(size = 3, alpha = 0.8, colour = "lightgray") +
labs(title = "Change in income inequality in Europe",
subtitle = "Gini coefficient of disposable household income, 2000-2020",
caption ="Source: Eurostat. Figure: Chiara Kahler", y = "Gini Index", x = NULL)+
theme_minimal() +
theme(panel.grid.minor = element_blank())+
theme(plot.title = element_text(size = 22, face = "bold"))+
theme(plot.subtitle = element_text(size = 15, face = "plain"))+
geom_point(data = final_income_ineq_eu_2000_2020,
aes(x = geo, y = OBS_VALUE, color=TIME_PERIOD), size = 3.2)+
scale_color_manual(values = c("orange2", "darkblue"))+
theme(legend.title = element_blank(),
legend.position = c(0.8, 0.9),
legend.direction = "horizontal",
legend.text = element_text(size = 14))
getwd()
setwd("~/Daten/Lehre/wipol_advanced_BA/data/assignments")
library(tidyverse)
# Load data
raw <- read_csv("incomeineq.csv")
# Show all available countries, but we don't want country groups (EA18, EU15, etc.)
unique(raw$geo)
filtered <- raw |> filter(str_length(geo) < 3, TIME_PERIOD %in% c(2000,2020))
# Not all countries have both years available -> filter those with both values!
filtered |> count(geo)
plotdata <- filtered |> filter(n() > 1, .by = geo)
plotdata |>
ggplot(aes(x = geo, y = OBS_VALUE)) +
geom_line(aes(group = geo), linewidth = 3, color = "gray90") +
geom_point(aes(color = factor(TIME_PERIOD)), size = 3) +
scale_color_manual(name = NULL, values = c("goldenrod1","midnightblue"),
guide = guide_legend(direction = "horizontal")) +
labs(x = NULL, y = "Gini index", title = "Change in income inequality in Europe",
subtitle = "Gini coefficient of disposable household income, 2000-2020",
caption = "Source: Eurostat. Figure: @matschnetzer") +
theme_minimal() +
theme(legend.position = c(0.8,0.9),
plot.title.position = "plot",
plot.caption = element_text(size = 7, margin = margin(t = 1, unit = "lines")),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(linewidth = 0.2))
librarian::shelf(tidyverse, readxl, countrycode, ggtext, MetBrewer)
# Load original data from ECB: https://www.ecb.europa.eu/home/pdf/research/hfcn/HFCS_Statistical_tables_Wave_2017_May2021.zip?078368a4438f4d94712367f6615445aa
hfcs <- readxl::read_xlsx("~/Downloads/HFCS_Statistical_tables_Wave 2017_May2021.xlsx",
sheet = "J3 Net wealth per household ", range = "A4:Z24") |>
janitor::clean_names() |>
rename(measure = x1) |> select(-x2, -x3) |>
filter(measure %in% c("Mean", "p20", "p50", "p80")) |>
mutate(across(-measure, as.numeric))
hfcs
save(hfcs, "08_wealth.RData")
save(hfcs, file = "08_wealth.RData")
getwd()
install.packages(c("httpuv", "tzdb"))
librarian::shelf(tidyverse, readxl, countrycode, ggtext, MetBrewer)
setwd("~/Daten/Lehre/wipol_advanced_BA/data/code")
load("08_wealth.RData")
hfcs
# Data into long format with "pivot_longer", capitalize country codes with "toupper" and merge country names from countrycode package with "left_join"
findat <- hfcs |>
pivot_longer(-measure, names_to = "country", values_to = "value") |>
mutate(across(c(country, measure), toupper)) |>
left_join(countrycode::codelist |> select(iso2c, country.name.en),
by = c("country" = "iso2c")) |>
mutate(country.name.en = ifelse(country == "EURO_AREA", "Euro Area", country.name.en),
country.name.en = fct_reorder(country.name.en, value))
findat |>
ggplot(aes(x = country.name.en, y = value, group = country, color = measure)) +
geom_line(color = "gray90", alpha = 0.15, linewidth = 2) +
geom_point(size = 2) +
scale_color_manual(values = met.brewer("Isfahan2"),
guide = guide_legend(override.aes = list(size = 4))) +
scale_y_continuous(labels = scales::number_format(prefix = "€", suffix = "K")) +
coord_flip() +
labs(x = NULL, y = NULL, color = NULL,
title = "Who are the <span style='color:gold;'>**richest**</span> Europeans?",
subtitle = "Percentiles of net wealth distributions in thousand Euros",
caption = "Data: HFCS 2017, ECB. Figure: @matschnetzer") +
theme_minimal(base_family = "Roboto Condensed") +
theme(plot.background = element_rect(fill = "black"),
plot.margin = margin(t = 1, b = 1, l = 1, r = 1, unit = "lines"),
plot.title.position = "plot",
plot.title = element_markdown(size = 20),
plot.subtitle = element_text(margin = margin(b = 1, unit = "lines")),
plot.caption = element_text(margin = margin(t = 2, unit = "lines"), size = 7),
panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_line(linewidth = 0.1, color = "gray80"),
legend.position = c(0.65, 0.3),
text = element_text(color = "white"),
axis.text = element_text(color = "white"),
axis.text.y = element_text(size = 8))
